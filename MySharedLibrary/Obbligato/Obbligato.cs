using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;

/*
[assembly: AssemblyVersion("1.0.0.1")] 
[assembly: AssemblyTitle("StudentProject")] 
[assembly: AssemblyDescription("StudentProject Build Date:2024/12/2 下午 03:33:06")] 
[assembly: AssemblyCompany("周敬斐 (mahler chou)")] 
[assembly: AssemblyProduct("Obbligato ..")] 
[assembly: AssemblyCopyright("周敬斐 作品 (Mahler Works), Copyright 2005, 周敬斐(Mahler)")] 
[assembly: AssemblyTrademark("Thanks Jamy, Doris, and Carol for a great story.")] 
*/


/**********************************************************************************************************************
 *Default Package
**********************************************************************************************************************/
namespace DB
{
    /*
     * Obbligato 
     * 
     * Service Provider for classes.
     *  
     * 2005/06/30
     * 2016/10/11 To support multi-DB, move base library into client's namespace. 
     * 2017/04/14 v6.2 : 
     *   1. Add command timeout to DataProvider
     *   2. Make sure there is only one copy in generated code.
     *   3. Remove SpSuccessException, it causes performance degrading.
	 * 2020/01/27 v7.0 :
	 *   1. Removing SpFailException, SpDuplicateException, SpNotFoundException, SpParameterException, SpOtherException
     */

    using System.Data;
    using System.Data.SqlClient;

    /// <summary>
    /// Each parameter class must implement this interface for validating parameters.
    /// </summary>
    internal interface IRowData
    {
        /// <summary>
        /// Validate function for parameters.
        /// </summary>
        void IsValidate();
    }

    /// <summary>
    /// Provides database manipulation to Obbligato classes.
    /// </summary>
    public class DataProvider
    {
        /// <summary>
        /// Connection string.
        /// </summary>
        public static string ConnectionString = "data source=172.XXX.XXX.XXX;initial catalog=Student;user id=sa;persist security info=True;password=XXXXXXX;workstation id=JS;packet size=4096;";

        /// <summary>
        /// Command Timeout time.
        /// </summary>
        public static int CommandTimeout = 60;

        public static System.Data.SqlClient.SqlCommand getSpCommand(string spName)
        {
            SqlConnection conn = new SqlConnection(ConnectionString);
            conn.Open();

            SqlCommand cmd = new SqlCommand();
            cmd.Connection = conn;
            cmd.CommandTimeout = CommandTimeout;
            cmd.CommandText = spName;
            cmd.CommandType = CommandType.StoredProcedure;
            return cmd;
        }
    }


    /// <summary>
    /// (Stored Procedure Classe, sp_classes_list) 
    /// 列出班級, Generated by Obbligato v.9.0a, 2024/12/2 下午 03:33:06
    /// </summary>
    public sealed class sp_classes_list
    {
        /// <summary>
        /// Execute the stored procedure [sp_classes_list], and return a row array.
        /// </summary>
        public static Row[] ExecuteArr()
        {
            Row[] objArr = new Row[0];
            System.Collections.ArrayList oResult = new System.Collections.ArrayList();
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_classes_list");
            try
            {
                SqlDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    Row r = new Row();
                    if (!Convert.IsDBNull(reader["class_id"])) { r.class_id = reader["class_id"].ToString(); }
                    if (!Convert.IsDBNull(reader["class_name"])) { r.class_name = reader["class_name"].ToString(); }
                    oResult.Add(r);
                }
                reader.Close();
            }
            finally
            {
                cmd.Connection.Close();
            }
            return (Row[])oResult.ToArray(typeof(Row));
        }

        /// <summary>
        /// Execute the stored procedure [sp_classes_list], and return a data table.
        /// </summary>
        public static DataTable ExecuteDt()
        {
            DataTable DT = new DataTable();
            System.Collections.ArrayList oResult = new System.Collections.ArrayList();
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_classes_list");
            SqlDataAdapter DA = new SqlDataAdapter(cmd);
            try
            {
                DA.Fill(DT);
            }
            finally
            {
                cmd.Connection.Close();
            }
            return DT;
        }

        /// <summary>
        /// Result class of sp_classes_list. 列出班級
        /// </summary>
        public class Row
        {
            /// <summary>
            /// , Type:System.Int32 Length:-1, Nullable: Yes
            /// </summary>
            public string class_id { get; set; }

            /// <summary>
            /// , Type:System.String Length:-1, Nullable: Yes
            /// </summary>
            public string class_name { get; set; }

        }

    }
    /// <summary>
    /// (Stored Procedure Classe, sp_student_list) 
    /// 列出學生清冊(BY 班級), Generated by Obbligato v.9.0a, 2024/12/2 下午 03:33:06
    /// </summary>
    public sealed class sp_student_list
    {
        /// <summary>
        /// Execute the stored procedure [sp_student_list], and return a row array.
        /// </summary>
        public static Row[] ExecuteArr(Param objP)
        {
            Row[] objArr = new Row[0];
            System.Collections.ArrayList oResult = new System.Collections.ArrayList();
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_student_list");
            // User Added Parameter
            SqlParameter pTmp;

            //Parameter @class_id
            pTmp = new SqlParameter("@class_id", SqlDbType.Int);
            pTmp.Value = objP.class_id;
            cmd.Parameters.Add(pTmp);

            try
            {
                SqlDataReader reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    Row r = new Row();
                    if (!Convert.IsDBNull(reader["id"])) { r.id = reader["id"].ToString(); }
                    if (!Convert.IsDBNull(reader["name"])) { r.name = reader["name"].ToString(); }
                    if (!Convert.IsDBNull(reader["age"])) { r.age = reader["age"].ToString(); }
                    if (!Convert.IsDBNull(reader["class_id"])) { r.class_id = reader["class_id"].ToString(); }
                    oResult.Add(r);
                }
                reader.Close();
            }
            finally
            {
                cmd.Connection.Close();
            }
            return (Row[])oResult.ToArray(typeof(Row));
        }

        /// <summary>
        /// Execute the stored procedure [sp_student_list], and return a data table.
        /// </summary>
        public static DataTable ExecuteDt(Param objP)
        {
            DataTable DT = new DataTable();
            System.Collections.ArrayList oResult = new System.Collections.ArrayList();
            SqlCommand cmd = DataProvider.getSpCommand(@"sp_student_list");
            // User Added Parameter
            SqlParameter pTmp;

            //Parameter @class_id
            pTmp = new SqlParameter("@class_id", SqlDbType.Int);
            pTmp.Value = objP.class_id;
            cmd.Parameters.Add(pTmp);

            SqlDataAdapter DA = new SqlDataAdapter(cmd);
            try
            {
                DA.Fill(DT);
            }
            finally
            {
                cmd.Connection.Close();
            }
            return DT;
        }

        /// <summary>
        /// Parameter class of sp_student_list. 列出學生清冊(BY 班級)
        /// </summary>
        public sealed class Param
        {
            /// <summary>
            /// Default:0 Type:System.Int32 Length:10, Nullable: No
            /// </summary>
            public int class_id { get; set; }

        }
        /// <summary>
        /// Result class of sp_student_list. 列出學生清冊(BY 班級)
        /// </summary>
        public class Row
        {
            /// <summary>
            /// , Type:System.Int32 Length:-1, Nullable: Yes
            /// </summary>
            public string id { get; set; }

            /// <summary>
            /// , Type:System.String Length:-1, Nullable: Yes
            /// </summary>
            public string name { get; set; }

            /// <summary>
            /// , Type:System.Int32 Length:-1, Nullable: Yes
            /// </summary>
            public string age { get; set; }

            /// <summary>
            /// , Type:System.Int32 Length:-1, Nullable: Yes
            /// </summary>
            public string class_id { get; set; }

        }

    }
}


